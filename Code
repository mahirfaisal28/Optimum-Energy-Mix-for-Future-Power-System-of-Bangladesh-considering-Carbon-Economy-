clc;
clear all;
close all;

%% 1. Initialization of Parameters
years = 11;
types = {'Coal', 'Gas', 'Nuclear', 'Hydro', 'Biomass', 'Solar', 'Wind'};
n_types = length(types);

% Define Costs and Capacities
investment_cost = [1750, 600, 5500, 3250, 2750, 1250, 1500]; 
fuel_cost = [0.04, 0.06, 0.01, 0, 0.03, 0, 0]; 
om_cost = [0.03, 0.02, 0.02, 0.01, 0.02, 0.01, 0.01]; 
carbon_intensity = [850, 500, 0, 0, 450, 0, 0]; % in gCO2/kWh
carbon_cost = [0.03, 0.02, 0.01, 0.005, 0.02, 0, 0]; 

% Demand Growth & Initial Load Demand
initial_load_demand = 1550; % in MW
load_demand = initial_load_demand * (1.06.^(0:years-1)); % increase by 6% each year

% Constraints (based on the scenario in Bangladesh)
max_capacity = [800, 1000, 300, 700, 400, 600, 400]; % in MW
min_capacity = [100, 50, 30, 70, 20, 100, 80]; % in MW
max_operating_hours = [7000, 6500, 3000, 2000, 4000, 4000, 3500]; % in hours/year

% Carbon emission limit
total_carbon_limit = 7000000; % in tonnes

% Adjust costs and capacities over time
investment_costs1 = investment_cost' .* (1.02.^(0:years-1));
fuel_costs1 = fuel_cost' .* (1.02.^(0:years-1));
om_costs1 = om_cost' .* (1.02.^(0:years-1));
carbon_costs1 = carbon_cost' .* (1.04.^(0:years-1));
max_capacity1 = repmat(max_capacity', 1, years);

min_capacity1 = min_capacity' .* (1.06.^(0:years-1));
max_operating_hours1 = max_operating_hours' .* (1.06.^(0:years-1));

%% 2. Define Decision Variables
capacity = sdpvar(n_types, years, 'full');
annual_costs = sdpvar(1, years);
annual_carbon_emissions = sdpvar(1, years);

%% 3. Objective Function Calculation
for y = 1:years
    annual_cost = 0;
    for t = 1:n_types
        investment_cost_t = investment_costs1(t, y) * capacity(t, y);
        energy_generated = capacity(t, y) * max_operating_hours1(t, y); % in MWh
        operational_cost_t = energy_generated * (fuel_costs1(t, y) + om_costs1(t, y) + carbon_costs1(t, y));
        annual_cost = annual_cost + investment_cost_t + operational_cost_t;
    end
    annual_costs(y) = annual_cost;
end

%% 4. Define Constraints with Reserve Margin
constraints = [];
reserve_margin_rate = 0.10;

for y = 1:years
    for t = 1:n_types
        constraints = [constraints, min_capacity1(t) <= capacity(t, y) <= max_capacity1(t)];
    end
    
    % Calculate total generation with reserve margin
    total_generation = sum(capacity(:, y) .* max_operating_hours1(:, y));
    reserve_margin = reserve_margin_rate * load_demand(y) * 8760;
    constraints = [constraints, total_generation >= (load_demand(y) * 8760 + reserve_margin)];
    
    % Calculate annual carbon emissions and apply the yearly limit
    annual_carbon_emissions(y) = sum((carbon_intensity .* capacity(:, y)') .* max_operating_hours1(:, y)', 2) * 1e-6; % Convert to tonnes
    constraints = [constraints, annual_carbon_emissions(y) <= total_carbon_limit];
    
    
    if y > 1
        constraints = [constraints, capacity(1:2, y) <= 0.95 * capacity(1:2, y-1)];
    end
end

%% 5. Linear Optimization
options = sdpsettings('verbose', 1, 'solver', 'linprog');
optimize(constraints, sum(annual_costs), options);

%% 6. Calculate Non-Optimized Annual Costs
non_optimized_annual_costs = zeros(1, years);

for y = 1:years
    annual_cost = 0;
    for t = 1:n_types
        max_capacity_t = max_capacity1(t, y);
        investment_cost_t = investment_costs1(t, y) * max_capacity_t;
        energy_generated = max_capacity_t * max_operating_hours1(t, y); % in MWh
        operational_cost_t = energy_generated * (fuel_costs1(t, y) + om_costs1(t, y) + carbon_costs1(t, y));
        annual_cost = annual_cost + investment_cost_t + operational_cost_t;
    end
    non_optimized_annual_costs(y) = annual_cost;
end

%% 7. Display Results
annual_costs_opt = value(annual_costs);
annual_carbon_emissions_opt = value(annual_carbon_emissions);

disp('Optimal Annual Costs ($) per Year:');
disp(array2table(annual_costs_opt', 'VariableNames', {'AnnualCost'}));

disp('Non-Optimized Annual Costs ($) per Year:');
disp(array2table(non_optimized_annual_costs', 'VariableNames', {'AnnualCost'}));

%% 8. Plot Optimized vs Non-Optimized Costs
figure;
hold on;
bar(1:years, non_optimized_annual_costs, 'FaceColor', [0, 0, 1]); % Blue
bar(1:years, annual_costs_opt, 'FaceColor', [1, 1, 0]); % Yellow
xlabel('Year');
ylabel('Total Cost ($)');
title('Comparison of Optimized and Non-Optimized Total Costs for Years 2025-2035');
xticks(1:years);
xticklabels(2025:2035);
grid on;
legend('Non-Optimized', 'Optimized');
hold off;


%% 9. Energy Mix Visualization
optimized_capacity = value(capacity);

years_per_figure = 5;

figure;
for y = 1:years_per_figure
    subplot(2, ceil(years_per_figure/2), y);
    pie(optimized_capacity(:, y), types);
    title(['Year ' num2str(2024 + y) ' Energy Mix (Optimized)']);
    
    percentage_labels = strcat(types', ': ', num2str((optimized_capacity(:, y)/sum(optimized_capacity(:, y)))*100, '%.2f'), '%');
    legend(percentage_labels, 'Location', 'bestoutside');
end
sgtitle('Energy Mix Distribution for Years 2025 to 2029');

figure;
for y = (years_per_figure + 1):years
    subplot(2, ceil(years_per_figure/2), y - years_per_figure);
    pie(optimized_capacity(:, y), types);
    title(['Year ' num2str(2024 + y) ' Energy Mix (Optimized)']);
    
    percentage_labels = strcat(types', ': ', num2str((optimized_capacity(:, y)/sum(optimized_capacity(:, y)))*100, '%.2f'), '%');
    legend(percentage_labels, 'Location', 'bestoutside');
end
sgtitle('Energy Mix Distribution for Years 2030 to 2035');

%% 10. Energy Mix Change Over Time
total_capacity_per_year = sum(optimized_capacity, 1);
percentage_mix = (optimized_capacity ./ total_capacity_per_year) * 100;

figure;
hold on;
line_width = 2;
for t = 1:n_types
    plot(1:years, percentage_mix(t, :), 'LineWidth', line_width, 'DisplayName', types{t});
end
hold off;
xlabel('Year');
ylabel('Percentage of Total Capacity (%)');
title('Change in Energy Mix Over the Year (2025-2035)');
xticks(1:years);
xticklabels(2025:2035);
legend('show');
grid on;

%% 11. Calculate Energy Generation and Compare with Peak Demand
peak_demand = load_demand * 1.15; % Adjusted to 15% more than the load demand

% Calculate the total energy generation for each year
energy_generation = sum(optimized_capacity .* max_operating_hours1, 1); % in MWh

% Convert energy generation to MW by dividing by 8760 hours in a year
energy_generation_MW = energy_generation / 8760;

% Plot the Energy Generation vs. Peak Demand Curve
figure;
hold on;
plot(1:years, energy_generation_MW, '-o', 'LineWidth', 2, 'DisplayName', 'Demand (MW)');
plot(1:years, peak_demand, '-o', 'LineWidth', 2, 'DisplayName', 'Energy Generation (MW)');
hold off;
xlabel('Year');
ylabel('Power (MW)');
title('Energy Generation vs. Demand (2025-2035)');
xticks(1:years);
xticklabels(2025:2035);
legend('show');
grid on;

